# frozen_string_literal: true
require_relative "finish_reason_enum"
require_relative "normalized_log_probs"
require_relative "vellum_variable_type"
require "ostruct"
require "json"

module Vellum
  class EnrichedNormalizedCompletion
  # @return [String] The Vellum-generated ID of the completion.
    attr_reader :id
  # @return [String] The external ID that was originally provided along with the generation request,
#  which uniquely identifies this generation in an external system.
    attr_reader :external_id
  # @return [String] The text generated by the LLM.
    attr_reader :text
  # @return [Vellum::FinishReasonEnum] The reason the generation finished.
#  * `LENGTH` - LENGTH
#  * `STOP` - STOP
#  * `UNKNOWN` - UNKNOWN
    attr_reader :finish_reason
  # @return [Vellum::NormalizedLogProbs] The logprobs of the completion. Only present if specified in the original
#  request options.
    attr_reader :logprobs
  # @return [String] The ID of the model version used to generate this completion.
    attr_reader :model_version_id
  # @return [String] 
    attr_reader :prompt_version_id
  # @return [Vellum::VellumVariableType] 
    attr_reader :type
  # @return [String] 
    attr_reader :deployment_release_tag
  # @return [String] 
    attr_reader :model_name
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] The Vellum-generated ID of the completion.
    # @param external_id [String] The external ID that was originally provided along with the generation request,
#  which uniquely identifies this generation in an external system.
    # @param text [String] The text generated by the LLM.
    # @param finish_reason [Vellum::FinishReasonEnum] The reason the generation finished.
#  * `LENGTH` - LENGTH
#  * `STOP` - STOP
#  * `UNKNOWN` - UNKNOWN
    # @param logprobs [Vellum::NormalizedLogProbs] The logprobs of the completion. Only present if specified in the original
#  request options.
    # @param model_version_id [String] The ID of the model version used to generate this completion.
    # @param prompt_version_id [String] 
    # @param type [Vellum::VellumVariableType] 
    # @param deployment_release_tag [String] 
    # @param model_name [String] 
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [Vellum::EnrichedNormalizedCompletion]
    def initialize(id:, external_id: OMIT, text:, finish_reason: OMIT, logprobs: OMIT, model_version_id: OMIT, prompt_version_id:, type: OMIT, deployment_release_tag:, model_name:, additional_properties: nil)
      @id = id
      @external_id = external_id if external_id != OMIT
      @text = text
      @finish_reason = finish_reason if finish_reason != OMIT
      @logprobs = logprobs if logprobs != OMIT
      @model_version_id = model_version_id if model_version_id != OMIT
      @prompt_version_id = prompt_version_id
      @type = type if type != OMIT
      @deployment_release_tag = deployment_release_tag
      @model_name = model_name
      @additional_properties = additional_properties
      @_field_set = { "id": id, "external_id": external_id, "text": text, "finish_reason": finish_reason, "logprobs": logprobs, "model_version_id": model_version_id, "prompt_version_id": prompt_version_id, "type": type, "deployment_release_tag": deployment_release_tag, "model_name": model_name }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of EnrichedNormalizedCompletion
    #
    # @param json_object [String] 
    # @return [Vellum::EnrichedNormalizedCompletion]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      external_id = parsed_json["external_id"]
      text = parsed_json["text"]
      finish_reason = parsed_json["finish_reason"]
      unless parsed_json["logprobs"].nil?
        logprobs = parsed_json["logprobs"].to_json
        logprobs = Vellum::NormalizedLogProbs.from_json(json_object: logprobs)
      else
        logprobs = nil
      end
      model_version_id = parsed_json["model_version_id"]
      prompt_version_id = parsed_json["prompt_version_id"]
      type = parsed_json["type"]
      deployment_release_tag = parsed_json["deployment_release_tag"]
      model_name = parsed_json["model_name"]
      new(
        id: id,
        external_id: external_id,
        text: text,
        finish_reason: finish_reason,
        logprobs: logprobs,
        model_version_id: model_version_id,
        prompt_version_id: prompt_version_id,
        type: type,
        deployment_release_tag: deployment_release_tag,
        model_name: model_name,
        additional_properties: struct
      )
    end
# Serialize an instance of EnrichedNormalizedCompletion to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.external_id&.is_a?(String) != false || raise("Passed value for field obj.external_id is not the expected type, validation failed.")
      obj.text.is_a?(String) != false || raise("Passed value for field obj.text is not the expected type, validation failed.")
      obj.finish_reason&.is_a?(Vellum::FinishReasonEnum) != false || raise("Passed value for field obj.finish_reason is not the expected type, validation failed.")
      obj.logprobs.nil? || Vellum::NormalizedLogProbs.validate_raw(obj: obj.logprobs)
      obj.model_version_id&.is_a?(String) != false || raise("Passed value for field obj.model_version_id is not the expected type, validation failed.")
      obj.prompt_version_id.is_a?(String) != false || raise("Passed value for field obj.prompt_version_id is not the expected type, validation failed.")
      obj.type&.is_a?(Vellum::VellumVariableType) != false || raise("Passed value for field obj.type is not the expected type, validation failed.")
      obj.deployment_release_tag.is_a?(String) != false || raise("Passed value for field obj.deployment_release_tag is not the expected type, validation failed.")
      obj.model_name.is_a?(String) != false || raise("Passed value for field obj.model_name is not the expected type, validation failed.")
    end
  end
end